총 6문제 150분(2시간 30분) 진행했다.

1번문제 
: 간단한 괄호 체크문제 맨처음에 스택하나만 사용해서 할 방법이 없을까
생각하며 시간을 많이 날려먹었다.. 결국 각 괄호 종류에 맞게 스택을 사용하여 처리

2번문제
: 컨닝 지수? 확인하는 문제 이 간단한 문제를 왜 30분이나 걸렸을까.. 반성하자

3번문제
: 가장 긴 도로를 확인하는 문제 나는 0을 만났을때를 초점으로 하여 진행하였다.
처음부터 진행하여 도로를 고치고 다음 시작점은 처음 0이 시작되는 다음부터 확인
차례대로 진행하여 가장 긴 도로를 저장하고 끝

4번문제
: 계좌내역을 통해서 최종결과 값을 산출 ( 계좌내용 복원? ) 사용한 id는 따로 저장하여 중복하여 계산을 방지하고 계좌를 찾아서 요구하는 것을 계산해준다.
없는 계좌는 생성하여 추가

5번문제
: 각 문서에 맞는 태그들을 많이 언급한 순서대로 산출하는 문제

6번문제
:  리눅스 명령어를 처리하게끔 하는 문제였다. 시간부족으로인해 도중 시간 종료.

=> 전체적으로 봤을때 문제 난이도가 그렇게 어렵게 느껴지진 않았다. 쉬운 곳에서 시간을 너무 많이 사용했고, 간단하게 풀고 넘어가야하지 않았나 싶다.. 아쉬운 점이 너무 많다


작성한 소스를 남겨도 될지 모르겠다. 

// 1번 문제 27분
- 올바른 괄호인지 체크하는 문제

#include <string>
#include <vector>
#include <stack>
using namespace std;

int solution(string inputString) {
    int answer = -1;
    
    stack<char> type1, type2, type3, type4;
    int count = 0;
    
    for(int i = 0; i < inputString.length(); i++)
    {
        switch(inputString[i])
        {
            case '(':
                type1.push(inputString[i]);
                break;
            case '{':
                type2.push(inputString[i]);
                break;
            case '[':
                type3.push(inputString[i]);
                break;
            case '<':
                type4.push(inputString[i]);
                break;
            case ')':           // 위에가 괄호 여는것 일 경우 맨위 팝
                {
                    // 비어 있을 경우
                    if(type1.empty())
                        return answer;
                    // 올바른 괄호가 아닐경우
                    else if(type1.top() != '(')
                        return answer;
                    else
                    {
                        type1.pop();
                        count++;
                    }
                    break;
                }
            case '}':
                {
                    if(type2.empty())
                        return answer;
                    else if(type2.top() != '{')
                        return answer;
                    else
                    {
                        type2.pop();
                        count++;
                    }
                    break;
                }
            case ']':
                {
                    if(type3.empty())
                        return answer;
                    else if(type3.top() != '[')
                        return answer;
                    else
                    {
                        type3.pop();
                        count++;
                    }
                    break;
                }
            case '>':
                {
                    if(type4.empty())
                        return answer;
                    else if(type4.top() != '<')
                        return answer;
                    else
                    {
                        type4.pop();
                        count++;
                    }
                    break;
                }
        }
    }
    
    // 남아있는 괄호 존재
    if(!type1.empty() || !type2.empty() || !type3.empty() || !type4.empty())
        return answer;
    else
        answer = count;
    
    return answer;
}


// 2번문제 약30분
- 컨닝 체크 문제 

#include <string>
#include <vector>
using namespace std;

int solution(string answer_sheet, vector<string> sheets) {
    int answer = -1;
    
    for(int i = 0; i < sheets.size(); i++)
    {
        for(int j = 1 + i; j < sheets.size(); j++)
        {
            // 답안 체크 시작
            int count = 0, max_len = 0, len = 0;
            
            for(int k = 0; k < answer_sheet.length(); k++)
            {
                // 같은 선택지 오답일 경우
                if(answer_sheet[k] != sheets[i][k] && answer_sheet[k] != sheets[j][k]
                  && sheets[i][k] == sheets[j][k])
                {
                    count++;
                    len++;
                }
                else
                    len = 0;
                
                if(max_len <= len)
                        max_len = len;
            }
            
            int num = count + (max_len * max_len);
            if(answer <= num)
                answer = num;
        }
    }
    return answer;
}

// 문제 3번 약 10분 소요
- 도로를 중간에 고쳤을 경우 가장 긴 도로 찾기 문제

#include <string>
#include <vector>
using namespace std;

int solution(string road, int n) {
    int answer = -1;
    
    int cursor = 0;
    while(cursor < road.length())
    {
        int len = 0, count = 0;
        for(int i = cursor; i < road.length(); i++)
        {   
            // 더이상 못고침 - 스탑
            if(n == count && road[i] == '0')
                break;
            // 도로 고침
            if(road[i] == '0')
                count++;
            len++;
        }
    
        // 가장 긴 도로인가?
        if(answer <= len)
            answer = len;
        
        // 다음 위치 찾기
        bool check = false;
        for(int i = cursor + 1; i < road.length(); i++)
            if(road[i] == '0')
            {
                cursor = i + 1;
                check = true;
                break;
            }
        // 다음 위치 못 찾았을 경우
        if(!check)
            cursor = road.length();
    }
    
    return answer;
}

// 문제 4번 24분 소요
- 계좌 출금/입금 문제

#include <string>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<string>> solution(vector<vector<string>> snapshots, vector<vector<string>> transactions) {
    vector<vector<string>> answer;
    vector<string> id;
    
    for(int i = 0; i < transactions.size(); i++)
    {
        // 사용한 아이디 체크
        bool check = false;
        for(int j = 0; j < id.size(); j++)
        {
            if(id[j] == transactions[i][0])
            {
                check = true;
                break;
            }
        }
        
        // 이미 진행한 id
        if(check)
            continue;
        else
        {
            // 계좌 찾기
            int cursor = -1;
            for(int j = 0; j < snapshots.size(); j++)
                if(snapshots[j][0] == transactions[i][2])
                {
                    cursor = j;
                    break;
                }
            
            // save
            if(transactions[i][1] == "SAVE")
            {
                // 계좌 있음
                if(cursor != -1)
                {
                    int m = stoi(snapshots[cursor][1]) + stoi(transactions[i][3]);
                    snapshots[cursor][1] = to_string(m);
                }
                // 신규
                else
                {
                    vector<string> newPeople;
                    newPeople.push_back(transactions[i][2]);
                    newPeople.push_back(transactions[i][3]);
                    snapshots.push_back(newPeople);
                }
            }
            // withdraw
            else if(transactions[i][1] == "WITHDRAW")
            {
                // 계좌 있음
                if(cursor != -1)
                {
                    int m = stoi(snapshots[cursor][1]) - stoi(transactions[i][3]);
                    snapshots[cursor][1] = to_string(m);
                }
                // 계좌 없음 (XXX)
                else
                    return answer;
            }
            
            id.push_back(transactions[i][0]);
        }
    }
    
    for(int i = snapshots.size() - 1; i >= 0; i--)
        answer.push_back(snapshots[i]);
    sort(answer.begin(), answer.end());
    
    return answer;
}


//문제 5 20분 소요
- 문서 태그로 찾기문제
- 가장 많이 언급된 태그를 우선으로 하여 반환

#include <string>
#include <vector>
#include <iostream>
using namespace std;

vector<string> solution(vector<vector<string>> dataSource, vector<string> tags) {
    vector<string> answer;
    int count[100000] = {0, };
    
    // tags 순회
    for(int i = 0; i < tags.size(); i++)
    {
        // dataSource 순회
        for(int j = 0; j < dataSource.size(); j++)
        {
            // 태그 찾기
            for(int k = 1; k < dataSource[j].size(); k++)
            {
                // 같은 태그 -> 언급+1;,  중복 태그 없음
                if(tags[i] == dataSource[j][k])
                {
                    count[j]++;
                    break;
                }
            }
        }
    }
    
    while(true)
    {
        int max = 0, cursor = -1;
        for(int i = 0; i < dataSource.size(); i++)
        {
            if(max < count[i])
            {
                max = count[i];
                cursor = i;
            }
        }
        
        // 끝
        if(cursor == -1)
            break;
        else
        {
            answer.push_back(dataSource[cursor][0]);
            count[cursor] = 0;
            max = 0;
        }
    }
    return answer;
}



// 6번 문제 리눅스 명령어 문자열 입력시 해당 커맨드 기능 만들기
명령어는 단 3가지
mkdir : 디렉토리 생성
rm : 디렉토리 삭제
cp : 디렉토리 복사