#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <sstream>
using namespace std;

bool isCheck[50000] = { 0, };

int Counting(vector<string> info, string query)
{
	memset(isCheck, 0, sizeof(isCheck));
	stringstream split_query(query);

	string word;
	int score_pos = 0;
	while (split_query >> word)
	{
		score_pos++;

		if (word == "and")
			continue;

		// 숫자일 때
		if (score_pos == 8)
		{
			for (int i = 0; i < info.size(); i++)
			{
				string num_s = "";
				if (isCheck[i])
				{
					for (int j = info[i].size() - 1; info[i][j] != ' '; j--)
						num_s += info[i][j];
					reverse(num_s.begin(), num_s.end());

					if (stoi(word) > stoi(num_s))
						isCheck[i] = false;
				}
			}
			break;
		}

		// 언어 -> 직군 -> 경력 -> 소울 푸드
		for (int i = 0; i < info.size(); i++)
		{
			// 직군 이상 찾기 (앞의 조건 확인)
			if (score_pos > 1)
			{
				// 앞의 조건이 true가 아니라면
				if (!isCheck[i])
					continue;
			}

			if (word == "-")
			{
				isCheck[i] = true;
				continue;
			}

			// 찾았다면
			if (!(info[i].find(word) == string::npos))
				isCheck[i] = true;
			else
				isCheck[i] = false;
		}
	}

	int check = 0;
	for (int i = 0; i < info.size(); i++)
		if (isCheck[i])
			check++;

	return check;
}

vector<int> solution(vector<string> info, vector<string> query) {
	vector<int> answer;

	for (int i = 0; i < query.size(); i++)
		answer.push_back(Counting(info, query[i]));

	for (int i = 0; i < answer.size(); i++)
		cout << answer[i] << " ";
	
		return answer;
}

int main()
{
	solution({ "java backend junior pizza 150", "python frontend senior chicken 210", "python frontend senior chicken 150", "cpp backend senior pizza 260", "java backend junior chicken 80", "python backend senior chicken 50" },
	{ "java and backend and junior and pizza 100", "python and frontend and senior and chicken 200", "cpp and - and senior and pizza 250", "- and backend and senior and - 150", "- and - and - and chicken 100", "- and - and - and - 150" });


	return 0;
}
